/**
 * Flowtype definitions for Observable
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface Subscribable<T>{
    subscribe(
        observerOrNext?: PartialObserver<T>| ((value: T) => void),
        error?: (error: any) => void,
        complete?: () => void): AnonymousSubscription
}
declare export type SubscribableOrPromise<T>= Subscribable<T>| PromiseLike<T>;
declare export type ObservableInput<T>= SubscribableOrPromise<T>| ArrayLike<T>;
/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 * @class  Observable<T>
 */
declare export class Observable<T>mixins Subscribable<T>{
    _isScalar: boolean;
    source: Observable<any>;
    operator: Operator<any,
    T>;

    /**
     * 
     * @constructor  * 
     * @param  the function that is  called when the Observable is
    initially subscribed to. This function is given a Subscriber, to which new values
    can be `next`ed, or an `error` method can be called to raise an error, or
    `complete` can be called to notify of a successful completion.
    */
    constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic): this;

    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static  true
     * @owner  Observable
     * @method  create
     * @param  ? the subscriber function to be passed to the Observable constructor
     * @return  a new cold observable
     */
    create: Function;

    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method  lift
     * @param  the operator defining the operation to take on the observable
     * @return  a new observable with the Operator applied
     */
    lift<R>(operator: Operator<T, R>): Observable<R>;

    /**
     * Registers handlers for handling emitted values, error and completions from the observable, and
     *   executes the observable's subscriber function, which will take action to set up the underlying data stream
     * @method  subscribe
     * @param  (optional) either an observer defining all functions to be called,
    or the first of three possible handlers, which is the handler for each value emitted from the observable.
     * @param  (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
    the error will be thrown as unhandled
     * @param  (optional) a handler for a terminal event resulting from successful completion.
     * @return  a subscription reference to the registered handlers
    */
    subscribe(): Subscription;
    subscribe(observer: PartialObserver<T>): Subscription;
    subscribe(
        next?: (value: T) => void,
        error?: (error: any) => void,
        complete?: () => void): Subscription;
    _trySubscribe(sink: Subscriber<T>): TeardownLogic;

    /**
     * 
     * @method  forEach
     * @param  a handler for each value emitted by the observable
     * @param  a constructor function used to instantiate the Promise
     * @return  a promise that either resolves on observable completion or
    rejects with the handled error
    */
    forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void>;
    _subscribe(subscriber: Subscriber<any>): TeardownLogic;
    if: typeof undefined;
    throw: typeof undefined
}